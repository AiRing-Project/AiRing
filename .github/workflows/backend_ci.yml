name: Backend CI

on:
    pull_request:
        branches: [main]
        paths:
            - "backend/**"

jobs:
    build:
        runs-on: ubuntu-latest
        timeout-minutes: 15

        steps:
            - uses: actions/checkout@v3

            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: "17"
                  distribution: "temurin"
                  cache: gradle

            - name: Cache Gradle packages
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/gradle/wrapper/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-

            - name: Grant execute permission for gradlew
              run: chmod +x backend/gradlew

            - name: Start Database
              working-directory: ./backend
              run: |
                  docker-compose up -d postgres
                  # 데이터베이스가 준비될 때까지 대기
                  echo "Waiting for database to be ready..."
                  for i in {1..30}; do
                    if docker-compose exec -T postgres pg_isready -U postgres; then
                      echo "Database is ready!"
                      break
                    fi
                    if [ $i -eq 30 ]; then
                      echo "Database failed to start in time"
                      exit 1
                    fi
                    echo "Waiting for database... ($i/30)"
                    sleep 2
                  done

            - name: Run Tests
              id: test
              continue-on-error: true
              working-directory: ./backend
              run: |
                  # 테스트 실행 및 결과 수집
                  TEST_OUTPUT=$(./gradlew test --console=plain)
                  TEST_STATUS=$?

                  {
                      echo "TEST_RESULTS<<EOF"
                      FAILED_COUNT=$(echo "$TEST_OUTPUT" | grep -c "FAILED" || echo "0")
                      echo "## ⚠️ Failed Tests (${FAILED_COUNT})"
                      echo "\`\`\`"
                      echo "$TEST_OUTPUT" | grep -A 1 "FAILED" | grep -v "^--$" || true
                      echo "\`\`\`"
                      echo "EOF"
                  } >> $GITHUB_ENV

                  # 테스트 상태 설정 (실패한 테스트가 있으면 failure)
                  if echo "$TEST_OUTPUT" | grep -q "FAILED"; then
                      echo "TEST_STATUS=failure" >> $GITHUB_ENV
                  else
                      echo "TEST_STATUS=success" >> $GITHUB_ENV
                  fi
              env:
                  GRADLE_OPTS: -Dorg.gradle.daemon=false
                  JAVA_OPTS: -Xmx2048m

            - name: Stop Database
              if: always()
              working-directory: ./backend
              run: docker-compose down

            - name: Comment Test Results
              if: always()
              uses: actions/github-script@v6
              with:
                  script: |
                      const testResults = process.env.TEST_RESULTS;
                      const testStatus = process.env.TEST_STATUS;

                      // 테스트가 실패한 경우에만 코멘트
                      if (testStatus === 'failure') {
                        const message = `${testResults}\n\n자세한 내용은 Checks 탭에서 확인해주세요.`;
                        
                        github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: message
                        });
                        
                        process.exit(1);
                      }

            - name: Build
              id: gradle
              working-directory: ./backend
              run: |
                  ./gradlew build -x test --console=plain
              env:
                  GRADLE_OPTS: -Dorg.gradle.daemon=false
                  JAVA_OPTS: -Xmx2048m

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Build Docker image
              id: docker
              working-directory: ./backend
              run: |
                  docker buildx build \
                      --cache-from type=gha \
                      --cache-to type=gha,mode=max \
                      -t airing-backend:latest \
                      .
